# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1

dist: trusty
language: rust
services: docker
sudo: required


env:
  global:
    - CRATE_NAME=clin
    - PKG_CONFIG_ALLOW_CROSS=1
    - PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/:/usr/lib/i386-linux-gnu/pkgconfig/


matrix:
  include:
    # Linux
    - env: TARGET=i686-unknown-linux-gnu
    #- env: TARGET=i686-unknown-linux-musl
    - env: TARGET=x86_64-unknown-linux-gnu
    #- env: TARGET=x86_64-unknown-linux-musl

    # OSX
    #- env: TARGET=i686-apple-darwin
    #  os: osx
    - env: TARGET=x86_64-apple-darwin
      os: osx

    # *BSD
    #- env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1

    # Other architectures
    #- env: TARGET=aarch64-unknown-linux-gnu
    #- env: TARGET=armv7-unknown-linux-gnueabihf
    #- env: TARGET=mips-unknown-linux-gnu
    #- env: TARGET=mips64-unknown-linux-gnuabi64
    #- env: TARGET=mips64el-unknown-linux-gnuabi64
    #- env: TARGET=mipsel-unknown-linux-gnu
    #- env: TARGET=powerpc-unknown-linux-gnu
    #- env: TARGET=powerpc64-unknown-linux-gnu
    #- env: TARGET=powerpc64le-unknown-linux-gnu
    #- env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1

    # Testing other channels
    #- env: TARGET=x86_64-unknown-linux-gnu
    #  rust: nightly
    #- env: TARGET=x86_64-apple-darwin
    #  os: osx
    #  rust: nightly

before_install: set -e

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  api_key:
    secure: Tg5DKMCB1wkOyRPFuDT+2xa8OxYgfFmSpQsfLV2dGxobQswCtZOV3+2UHJzh3ovsxZKQdn4fFcmtuxfg3vNB4JVIMkDQP6b3+M9Hx+42DrKLn7O6wyKec8zgswPBOokQHRRsxGC8vaFnRNJ1Y6Q5TJdSvP0zKYq7B0pOzN5HZS9RFAQPoiMrlFfq8y9+GnAycf5ezJ+9upWpOnVF0EgtCpYHkt6NHveXjpYVqlrhS3lpmxBymRLLKq+TYsCNXIt5dmX3SXszt6GM5mSGqkoxZeMcnPceA3pRQbVNIQHGAWFDY4aJH5bxSqUcMA1ObFlYJBmlN7Cvz3ODf031yOArnxdupOzR6lALpJEKSqxKtmrB7jegDEFLXnQjanU7nvyYkbmJjHs19AVRMPwyCRNSYf2Pvnhio4SsaYgY0tHifYMgfmBu2SEjRsu3DSyE1297mWJQFHQpT0yEYqyIDcrFDZe59KA9oH+/Zf+rarEtB/XX8VZ1hbWB2DMgnIbs3/R4sZPxccLdQViGbU4spIoVjTWSDWrZcHjKVY26/Q61WdH0B/4szY9kHKM0SG6rswfgIJeZL2Gn20kKfBc5YvjLfsGClBl/zxZhrt5/uX2+Qap+EyZAI52odsg39d4/JVVYlqZz5wxbN9M1NCW76m2yUI4QWuBRDY9rIpfdG9xk+R8=
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
